Щоб виконати це завдання, виконайте наступні кроки. Це пояснення написано для новачка, тож ми пройдемо всі кроки докладно.

1. Клонування репозиторію
Що потрібно зробити:
Клонувати репозиторій, щоб отримати код FastAPI застосунку.

Кроки:

Відкрийте термінал або Git Bash.

Виконайте команду для клонування репозиторію:

bash
Copy code
git clone https://github.com/GoIT-Python-Web/Computer-Systems-hw02
Перейдіть у клоновану папку:

bash
Copy code
cd Computer-Systems-hw02
2. Створення Dockerfile
Що потрібно зробити:
Створити Dockerfile, який містить інструкції для створення Docker-образу для вашого FastAPI застосунку.

Кроки:

У кореневій папці клонованого репозиторію створіть файл Dockerfile.

Відкрийте Dockerfile у текстовому редакторі та додайте наступний вміст:

Dockerfile
Copy code
# Використовуємо базовий образ Python
FROM python:3.8-slim

# Встановлюємо робочу директорію всередині контейнера
WORKDIR /app

# Копіюємо файли застосунку в контейнер
COPY . /app

# Встановлюємо залежності
RUN pip install --no-cache-dir -r requirements.txt

# Відкриваємо порт 80 для зв'язку
EXPOSE 80

# Команда для запуску застосунку
CMD ["uvicorn", "main:app", "--host", "0.0.0.0", "--port", "80"]
3. Написання docker-compose.yaml
Що потрібно зробити:
Створити файл docker-compose.yaml для налаштування сервісів застосунку та бази даних PostgreSQL.

Кроки:

У кореневій папці створіть файл docker-compose.yaml.

Відкрийте його у текстовому редакторі та додайте наступний вміст:

yaml
Copy code
version: '3.8'

services:
  web:
    build: .
    ports:
      - "8000:80"
    depends_on:
      - db
    environment:
      - SQLALCHEMY_DATABASE_URL=postgresql+psycopg2://postgres:567234@db:5432/hw02

  db:
    image: postgres:13
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: 567234
      POSTGRES_DB: hw02
    volumes:
      - postgres_data:/var/lib/postgresql/data

volumes:
  postgres_data:
4. Заміна localhost на ім'я сервісу PostgreSQL
Що потрібно зробити:
У файлі \\conf\\db.py, змініть рядок підключення до бази даних, щоб використовувати ім'я сервісу db.

Кроки:

Відкрийте файл \\conf\\db.py у текстовому редакторі.

Знайдіть рядок, де визначається SQLALCHEMY_DATABASE_URL.

Замініть localhost на db:

python
Copy code
SQLALCHEMY_DATABASE_URL = f"postgresql+psycopg2://postgres:567234@db:5432/hw02"
5. Запуск Docker Compose
Що потрібно зробити:
Зібрати та запустити середовище за допомогою Docker Compose.

Кроки:

У терміналі, в кореневій папці вашого проекту, виконайте команду для запуску контейнерів:

bash
Copy code
docker-compose up
Docker автоматично звантажить необхідні образи, побудує ваш Docker-образ і запустить застосунок разом із базою даних.

6. Перевірка функціональності застосунку
Що потрібно зробити:
Перевірити, чи працює застосунок і чи підключається він до бази даних.

Кроки:

Відкрийте браузер і перейдіть за адресою http://localhost:8000.

Ви повинні побачити інтерфейс FastAPI застосунку.

Натисніть кнопку "Перевірити БД". Якщо ви бачите повідомлення "Welcome to FastAPI!", значить все налаштовано правильно.

Здача завдання
Завантажте робочі файли на свій комп’ютер:

Збережіть файли проекту, включаючи Dockerfile і docker-compose.yaml, у папку.
Створіть архів:

Зробіть архів ДЗ2_ПІБ.zip (де ПІБ — це ваші прізвище, ім’я та по батькові).
Прикріпіть посилання на репозиторій:

Увійдіть у систему LMS, прикріпіть архів і вставте посилання на ваш репозиторій.
Відправте завдання на перевірку.

Якщо все зроблено правильно, ваш застосунок буде функціонувати, а база даних буде доступною.